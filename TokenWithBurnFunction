pragma solidity ^0.4.23;
/*modified for version 0.4.23 compatibility from ethereum.org */

interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }

contract ExampleErc20 {
  
    string public name;
    string public symbol;
    uint8 public decimals = 0;
    uint256 public totalSupply;

    
    mapping (address => uint256) public balanceOf;
    
  
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);

    /**
     * Constructor function for chosing name and symbol in IDE, now compatible with Solidity 0.4.23
     * USE " " for tokenName & tokenSymbol
     */ 
    constructor (
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  
        balanceOf[msg.sender] = totalSupply;               
        name = tokenName;                                  
        symbol = tokenSymbol;                              
    }

   
    function _transfer(address _from, address _to, uint _value) internal {
       
        require(_to != 0x0);
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }

  
    function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }

  

   
     function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);   
        balanceOf[msg.sender] -= _value;            
        totalSupply -= _value;                      
        emit Burn(msg.sender, _value);
        return true;
    }

}
